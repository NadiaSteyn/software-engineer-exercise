import unittestimport object_analysisimport jsonclass TestObject_analysis(unittest.TestCase):            def test_get_most_common_object(self): # method must start with 'test'        test_data_single_highest = """    [        {            "type": "star",            "name": "alpha-centaurus",            "redshift": 0        },        {            "type": "star",            "name": "sirius",            "redshift": 0        },        {            "type": "nebula",            "name": "crab",            "redshift": 0        },        {            "type": "galaxy",            "name": "sombrero",            "redshift": 1        }    ]    """    # the case where highest count returns more than one answer        test_data_multiple_highest = """    [        {            "type": "star",            "name": "alpha-centaurus",            "redshift": 0        },        {            "type": "nebula",            "name": "crab",            "redshift": 0        },        {            "type": "galaxy",            "name": "pinwheel",            "redshift": 0        },        {            "type": "supernovae",            "name": "1987A",            "redshift": 0        },        {            "type": "frb",            "name": "fast",            "redshift": 0        }    ]    """            result_simple_test = object_analysis.get_most_common_object(json.loads(test_data_single_highest))        result_multiple_highest = object_analysis.get_most_common_object(json.loads(test_data_multiple_highest))                self.assertEqual(result_simple_test,['star'])        self.assertEqual(result_multiple_highest, ['star', 'galaxy', 'supernovae', 'frb'])             if __name__ == '__main__':    unittest.main()        